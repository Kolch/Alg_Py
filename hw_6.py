# Подсчитать, сколько было выделено памяти под переменные в ранее разработанных программах в рамках первых трех уроков.
# Проанализировать результат и определить программы с наиболее эффективным использованием памяти.

from random import randint
import sys
print("-" * 20)
# Посчитать, сколько раз встречается определенная цифра в введенной последовательности чисел.
# Количество вводимых чисел и цифра, которую необходимо посчитать, задаются вводом с клавиатуры.)
number8 = int(input("Введите число:"))
q = int(input("Введите цифру, которую необходимо посчитать:"))
count = 0
while number8 != 0:
    z = number8 % 10
    if z == q:
        count += 1
    number8 = number8 // 10

memory = sys.getsizeof(count) + sys.getsizeof(number8) + sys.getsizeof(z)
print("Памяти использованно - ", memory)
print("Цифра %d встретилась %d раз" % (q, count))

print("-" * 20)
# В диапазоне натуральных чисел от 2 до 99 определить, сколько из них кратны каждому из чисел в диапазоне от 2 до 9.
array1 = [i for i in range(2, 100)]
result1 = [0] * 8
for i in array1:
    count = 0
    for j in range(2, 10):
        if i % j == 0:
            result1[j-2] += 1
i = 0
while i < len(result1):
    print("Чисел кратных %d - %d" % (i+2, result1[i]))
    i += 1

memory_1 = sys.getsizeof(array1) + sys.getsizeof(result1) + sys.getsizeof(i)
print("Памяти использованно - ", memory_1)


print("-" * 20)
# Во втором массиве сохранить индексы четных элементов первого массива.
# Например, если дан массив со значениями 8, 3, 15, 6, 4, 2, то во второй массив надо заполнить значениями 1, 4, 5, 6
# (или 0, 3, 4, 5 - если индексация начинается с нуля), т.к. именно в этих позициях первого массива стоят четные числа.
array2 = [randint(0, 100) for _ in range(15)]
even_array = []
for i in array2:
    if i % 2 == 0:
        even_array.append(array2.index(i))
print("Исходный массив -", array2)
print("индексы четных элементов массива -", even_array)
memory_2 = sys.getsizeof(array2) + sys.getsizeof(even_array)
print("Памяти использованно - ", memory_2)

print("-" * 20)

#  Определить, какое число в массиве встречается чаще всего.
# при наличии нескольких чисел равных по частоте появления выводится то, что больше по индексу
array4 = [randint(0, 100) for _ in range(15)]
digit = -1
d_count = 0
for i in array4:
    count = 0
    for j in array4:
        if j == i:
            count += 1
    if count > d_count:
        d_count = count
        digit = i
print("В массиве -", array4)
print("Чаще всего встречается число %d (%d раз)" % (digit, d_count))

memory_3 = sys.getsizeof(array4) + sys.getsizeof(digit) + sys.getsizeof(d_count)
print("Памяти использованно - ", memory_3)


# Анализ - ну цыфры говорят сами за себя. Меньше всего конечно использованно памяти было вв первом примере ибо там
# даже массива нет, простой цикл. Затем последний пример, там всего один массив, и две переменных
# Далее идет третий пример там уже два массива и простой цикл
# и больше всего памяти требует вторая программа

